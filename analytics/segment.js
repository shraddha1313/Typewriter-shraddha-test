"use strict";
// This client was automatically generated by Segment Typewriter. ** Do Not Edit **
// To update this file, run:
//   npx typewriter
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.destinationSubmitted = exports.setTypewriterOptions = exports.defaultValidationErrorHandler = void 0;
/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 *
 * You can install it with: `npm install --save-dev ajv`.
 */
var ajv_1 = __importDefault(require("ajv"));
/**
 * The default handler that is fired if none is supplied with setTypewriterOptions.
 * If NODE_ENV="test", this handler will throw an error. Otherwise, it will log
 * a warning message to the console.
 */
var defaultValidationErrorHandler = function (message, violations) {
    var msg = JSON.stringify({
        type: 'Typewriter JSON Schema Validation Error',
        description: "You made an analytics call (".concat(message.event, ") using Typewriter that doesn't match the ") +
            'Tracking Plan spec.',
        errors: violations,
    }, undefined, 2);
    if (process.env.NODE_ENV === 'test') {
        throw new Error(msg);
    }
    console.warn(msg);
};
exports.defaultValidationErrorHandler = defaultValidationErrorHandler;
var onViolation = exports.defaultValidationErrorHandler;
var missingAnalyticsNodeError = new Error("You must set an analytics-node instance:\n\n>\timport { Analytics } from '@segment/analytics-node'\n>\timport { setTypewriterOptions } from './analytics'\n>\n> const analytics = new Analytics({ writeKey: 'SEGMENT_WRITE_KEY' })\n>\tsetTypewriterOptions({ analytics: analytics\t})\n\nFor more information on @segment/analytics-node, see: https://segment.com/docs/sources/server/node/quickstart/\n");
var analytics = function () {
    throw missingAnalyticsNodeError;
};
/**
 * Updates the run-time configuration of this Typewriter client.
 * This function must be called with a configured analytics-node instance before firing
 * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
 *
 * @param {TypewriterOptions} options - the options to upsert
 *
 * @typedef {Object} TypewriterOptions
 * @property {Analytics} analytics - Underlying analytics instance where analytics
 * 		calls are forwarded on to.
 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
 * 		will be logged to stderr.
 */
function setTypewriterOptions(options) {
    analytics = options.analytics ? function () { return options.analytics; } : analytics;
    onViolation = options.onViolation || onViolation;
}
exports.setTypewriterOptions = setTypewriterOptions;
/**
    * Validates a message against a JSON Schema using Ajv. If the message
    * is invalid, the `onViolation` handler will be called.
    */
function validateAgainstSchema(message, schema) {
    var ajv = new ajv_1.default({ allErrors: true, verbose: true });
    if (!ajv.validate(schema, message.properties) && ajv.errors) {
        onViolation(message, ajv.errors);
    }
}
/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext(message) {
    return __assign(__assign({}, message), { context: __assign(__assign({}, (message.context || {})), { typewriter: {
                language: 'typescript',
                version: '9.1.0',
            } }) });
}
/**
 * Fires a 'destination submitted' track call.
 *
 *
 * @param {TrackMessage<DestinationSubmitted>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function destinationSubmitted(message, callback) {
    var event = withTypewriterContext(__assign(__assign({}, message), { event: 'destination submitted', properties: __assign({}, message.properties) }));
    var schema = { "$id": "destination_submitted", "$schema": "http://json-schema.org/draft-07/schema#", "properties": { "destination": { "$id": "/properties/destination", "type": ["string"] }, "details": { "$id": "/properties/details", "type": ["string"] }, "email": { "$id": "/properties/email", "type": ["string", "null"] }, "name": { "$id": "/properties/name", "type": ["string"] }, "send email to": { "$id": "/properties/send%20email%20to", "type": ["string"] }, "user": { "$id": "/properties/user", "properties": { "destination": { "$id": "/properties/properties/properties/user/properties/destination", "type": ["string"] }, "details": { "$id": "/properties/properties/properties/user/properties/details", "type": ["string"] }, "email": { "$id": "/properties/properties/properties/user/properties/email", "type": ["string"] }, "name": { "$id": "/properties/properties/properties/user/properties/name", "type": ["string"] } }, "required": [], "type": "object" } }, "required": ["details"], "type": "object" };
    validateAgainstSchema(event, schema);
    var a = analytics();
    if (a) {
        a.track(event, callback);
    }
    else {
        throw missingAnalyticsNodeError;
    }
}
exports.destinationSubmitted = destinationSubmitted;
var clientAPI = {
    /**
     * Updates the run-time configuration of this Typewriter client.
     * This function must be called with a configured analytics-node instance before firing
     * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
     *
     * @param {TypewriterOptions} options - the options to upsert
     *
     * @typedef {Object} TypewriterOptions
     * @property {Analytics} analytics - Underlying analytics instance where analytics
     * 		calls are forwarded on to.
     * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
     * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
     * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
     * 		will be logged to stderr.
     */
    setTypewriterOptions: setTypewriterOptions,
    /**
     * Fires a 'destination submitted' track call.
     *
     *
     * @param DestinationSubmitted props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    destinationSubmitted: destinationSubmitted,
};
exports.default = new Proxy(clientAPI, {
    get: function (target, method) {
        if (typeof method === 'string' && target.hasOwnProperty(method)) {
            return target[method];
        }
        return function () {
            console.warn("\u26A0\uFE0F  You made an analytics call (".concat(String(method), ") that can't be found. Either:\n         a) Re-generate your typewriter client: `npx typewriter`\n         b) Add it to your Tracking Plan: https://app.segment.com/segment-oscb/protocols/tracking-plans/rs_1zTHJU9fd5mt7cndWnd4PgJbMCE"));
            var a = analytics();
            if (a) {
                a.track(withTypewriterContext({
                    event: 'Unknown Analytics Call Fired',
                    properties: {
                        method: method,
                    },
                    userId: 'typewriter',
                }));
            }
        };
    },
});
